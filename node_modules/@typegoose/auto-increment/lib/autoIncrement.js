"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AutoIncrementID = exports.AutoIncrementIDSkipSymbol = exports.AutoIncrementSimple = exports.isNullOrUndefined = void 0;
const tslib_1 = require("tslib");
const mongoose = require("mongoose");
const logSettings_1 = require("./logSettings");
const DEFAULT_INCREMENT = 1;
/**
 * Because since node 4.0.0 the internal util.is* functions got deprecated
 * @param val Any value to test if null or undefined
 */
function isNullOrUndefined(val) {
    return val === null || val === undefined;
}
exports.isNullOrUndefined = isNullOrUndefined;
/**
 * The Plugin - Simple version
 * Increments an value each time it is saved
 * @param schema The Schema
 * @param options The Options
 */
function AutoIncrementSimple(schema, options) {
    // convert normal object into an array
    const fields = Array.isArray(options) ? options : [options];
    logSettings_1.logger.info('Initilaize AutoIncrement for an schema with %d fields to increment', fields.length);
    if (fields.length <= 0) {
        throw new Error('Options with at least one field are required!');
    }
    // check if all fields are valid
    for (const field of fields) {
        const schemaField = schema.path(field.field);
        // check if the field is even existing
        if (isNullOrUndefined(schemaField)) {
            throw new Error(`Field "${field.field}" does not exists on the Schema!`);
        }
        // check if the field is an number
        if (!(schemaField instanceof mongoose.Schema.Types.Number)) {
            throw new Error(`Field "${field.field}" is not an SchemaNumber!`);
        }
        if (isNullOrUndefined(field.incrementBy)) {
            logSettings_1.logger.info('Field "%s" does not have an incrementBy defined, defaulting to %d', field.field, DEFAULT_INCREMENT);
            field.incrementBy = DEFAULT_INCREMENT;
        }
    }
    // to have an name to the function if debugging
    schema.pre('save', function AutoIncrementPreSaveSimple() {
        if (!this.isNew) {
            logSettings_1.logger.info('Starting to increment "%s"', this.constructor.modelName);
            for (const field of fields) {
                logSettings_1.logger.info('Incrementing "%s" by %d', field.field, field.incrementBy);
                this[field.field] += field.incrementBy;
            }
        }
    });
}
exports.AutoIncrementSimple = AutoIncrementSimple;
/** The Schema used for the trackers */
const IDSchema = new mongoose.Schema({
    field: String,
    modelName: String,
    count: Number,
}, { versionKey: false });
IDSchema.index({ field: 1, modelName: 1 }, { unique: true });
exports.AutoIncrementIDSkipSymbol = Symbol('AutoIncrementIDSkip');
/**
 * The Plugin - ID
 * Increments an counter in an tracking collection
 * @param schema The Schema
 * @param options The Options
 */
function AutoIncrementID(schema, options) {
    /** The Options with default options applied */
    const opt = {
        field: '_id',
        incrementBy: DEFAULT_INCREMENT,
        trackerCollection: 'identitycounters',
        trackerModelName: 'identitycounter',
        startAt: 0,
        overwriteModelName: '',
        ...options,
    };
    // check if the field is an number
    if (!(schema.path(opt.field) instanceof mongoose.Schema.Types.Number)) {
        throw new Error(`Field "${opt.field}" is not an SchemaNumber!`);
    }
    let model;
    logSettings_1.logger.info('AutoIncrementID called with options %O', opt);
    schema.pre('save', async function AutoIncrementPreSaveID() {
        logSettings_1.logger.info('AutoIncrementID PreSave');
        const originalModelName = this.constructor.modelName;
        let modelName;
        if (typeof opt.overwriteModelName === 'function') {
            modelName = opt.overwriteModelName(originalModelName, this.constructor);
            if (!modelName || typeof modelName !== 'string') {
                throw new Error('"overwriteModelname" is a function, but did return a falsy type or is not a string!');
            }
        }
        else {
            modelName = opt.overwriteModelName || originalModelName;
        }
        if (!model) {
            logSettings_1.logger.info('Creating idtracker model named "%s"', opt.trackerModelName);
            // needs to be done, otherwise "undefiend" error if the plugin is used in an sub-document
            const db = this.db ?? this.ownerDocument().db;
            model = db.model(opt.trackerModelName, IDSchema, opt.trackerCollection);
            // test if the counter document already exists
            const counter = await model
                .findOne({
                modelName: modelName,
                field: opt.field,
            })
                .lean()
                .exec();
            if (!counter) {
                await model.create({
                    modelName: modelName,
                    field: opt.field,
                    count: opt.startAt - opt.incrementBy,
                });
            }
        }
        if (!this.isNew) {
            logSettings_1.logger.info('Document is not new, not incrementing');
            return;
        }
        // @ts-expect-error mongoose now restrics indexes to "string"
        if (typeof this[exports.AutoIncrementIDSkipSymbol] === 'boolean' && exports.AutoIncrementIDSkipSymbol) {
            logSettings_1.logger.info('Symbol "AutoIncrementIDSkipSymbol" is set to "true", skipping');
            return;
        }
        const leandoc = await model
            .findOneAndUpdate({
            field: opt.field,
            modelName: modelName,
        }, {
            $inc: { count: opt.incrementBy },
        }, {
            new: true,
            fields: { count: 1, _id: 0 },
            upsert: true,
            setDefaultsOnInsert: true,
        })
            .lean()
            .exec();
        if (isNullOrUndefined(leandoc)) {
            throw new Error(`"findOneAndUpdate" incrementing count failed for "${modelName}" on field "${opt.field}"`);
        }
        logSettings_1.logger.info('Setting "%s" to "%d"', opt.field, leandoc.count);
        this[opt.field] = leandoc.count;
        return;
    });
}
exports.AutoIncrementID = AutoIncrementID;
tslib_1.__exportStar(require("./types"), exports);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0b0luY3JlbWVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9hdXRvSW5jcmVtZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxxQ0FBcUM7QUFDckMsK0NBQXVDO0FBR3ZDLE1BQU0saUJBQWlCLEdBQUcsQ0FBQyxDQUFDO0FBRTVCOzs7R0FHRztBQUNILFNBQWdCLGlCQUFpQixDQUFDLEdBQVk7SUFDNUMsT0FBTyxHQUFHLEtBQUssSUFBSSxJQUFJLEdBQUcsS0FBSyxTQUFTLENBQUM7QUFDM0MsQ0FBQztBQUZELDhDQUVDO0FBRUQ7Ozs7O0dBS0c7QUFDSCxTQUFnQixtQkFBbUIsQ0FDakMsTUFBNEIsRUFDNUIsT0FBa0U7SUFFbEUsc0NBQXNDO0lBQ3RDLE1BQU0sTUFBTSxHQUFpQyxLQUFLLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDMUYsb0JBQU0sQ0FBQyxJQUFJLENBQUMsb0VBQW9FLEVBQUUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpHLElBQUksTUFBTSxDQUFDLE1BQU0sSUFBSSxDQUFDLEVBQUU7UUFDdEIsTUFBTSxJQUFJLEtBQUssQ0FBQywrQ0FBK0MsQ0FBQyxDQUFDO0tBQ2xFO0lBRUQsZ0NBQWdDO0lBQ2hDLEtBQUssTUFBTSxLQUFLLElBQUksTUFBTSxFQUFFO1FBQzFCLE1BQU0sV0FBVyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBRTdDLHNDQUFzQztRQUN0QyxJQUFJLGlCQUFpQixDQUFDLFdBQVcsQ0FBQyxFQUFFO1lBQ2xDLE1BQU0sSUFBSSxLQUFLLENBQUMsVUFBVSxLQUFLLENBQUMsS0FBSyxrQ0FBa0MsQ0FBQyxDQUFDO1NBQzFFO1FBQ0Qsa0NBQWtDO1FBQ2xDLElBQUksQ0FBQyxDQUFDLFdBQVcsWUFBWSxR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